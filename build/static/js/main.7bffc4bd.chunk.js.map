{"version":3,"sources":["logo.svg","Components/eventChart.js","Components/statsChart.js","Components/cdTable.js","Components/map.js","App.js","reportWebVitals.js","index.js"],"names":["EventChart","state","dailyData","fetch","then","response","json","data","formatDailyDates","setState","rawData","i","date","moment","format","style","width","ResponsiveContainer","height","LineChart","margin","top","right","left","bottom","this","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","name","type","stroke","activeDot","r","Component","StatsChart","stats","showClicks","showImpressions","showRevenue","tooltip","className","clicksToggle","current","impressionsToggle","revenueToggle","scaleImpressions","impressions","lines","push","createLines","display","flexDirection","Button","color","backgroundColor","border","onClick","columns","label","field","sort","CDTable","formatDates","makeData","temp","rows","striped","bordered","small","createClusterIcon","cluster","L","divIcon","html","getChildCount","iconSize","point","GeoMap","currDay","markers","icon","Marker","position","lat","lon","Popup","clicks","poi_id","revenue","console","log","MapContainer","center","zoom","TileLayer","url","attribution","spiderfyDistanceMultiplier","showCoverageOnHover","iconCreateFunction","createMarkers","App","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bffc4bd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport moment from \"moment\";\n\nclass EventChart extends Component {\n  state = {\n    dailyData: null,\n  };\n\n  componentDidMount() {\n    fetch(\"/events/daily\")\n      .then((response) => response.json())\n      .then((data) => this.formatDailyDates(data))\n      .then((data) => this.setState({ dailyData: data }));\n  }\n\n  formatDailyDates(rawData) {\n    for (let i in rawData) {\n      rawData[i].date = moment(rawData[i].date).format(\"dd, DD MMM Y\");\n    }\n    return rawData;\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"100%\" }}>\n        <ResponsiveContainer width=\"80%\" height={500}>\n          <LineChart\n            width={500}\n            height={300}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5,\n            }}\n            data={this.state.dailyData}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line\n              name=\"Events\"\n              type=\"monotone\"\n              dataKey=\"events\"\n              stroke=\"#8884d8\"\n              activeDot={{ r: 8 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n\nexport default EventChart;\n","import React, { Component } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport moment from \"moment\";\nimport { Button } from \"reactstrap\";\n\nclass StatsChart extends Component {\n  state = {\n    stats: null,\n    showClicks: true,\n    showImpressions: true,\n    showRevenue: true,\n    tooltip: [\n      <div className=\"custom-tooltip\">\n        <p className=\"label\"></p>\n      </div>,\n    ],\n  };\n\n  componentDidMount() {\n    fetch(\"/stats/daily\")\n      .then((response) => response.json())\n      .then((data) => this.formatDailyDates(data))\n      .then((data) => this.scaleImpressions(data))\n      .then((data) => this.setState({ stats: data }));\n  }\n\n  formatDailyDates(rawData) {\n    for (let i in rawData) {\n      rawData[i].date = moment(rawData[i].date).format(\"dd, DD MMM Y\");\n    }\n    return rawData;\n  }\n\n  scaleImpressions(rawData) {\n    for (let i in rawData) {\n      rawData[i].impressions = rawData[i].impressions / 1000;\n    }\n    return rawData;\n  }\n\n  clicksToggle = () => {\n    let current = this.state.showClicks;\n    this.setState({ showClicks: !current });\n  };\n\n  impressionsToggle = () => {\n    this.setState({ showImpressions: !this.state.showImpressions });\n  };\n\n  revenueToggle = () => {\n    this.setState({ showRevenue: !this.state.showRevenue });\n  };\n\n  createLines() {\n    let lines = [];\n    if (this.state.showClicks) {\n      lines.push(\n        <Line\n          name=\"Clicks\"\n          type=\"monotone\"\n          dataKey=\"clicks\"\n          stroke=\"#FF5733\"\n          activeDot={{ r: 8 }}\n        />\n      );\n      this.state.tooltip.push();\n    }\n\n    if (this.state.showImpressions) {\n      lines.push(\n        <Line\n          name=\"Impressions (in thousands)\"\n          type=\"monotone\"\n          dataKey=\"impressions\"\n          stroke=\"#FFC300\"\n          activeDot={{ r: 8 }}\n        />\n      );\n    }\n\n    if (this.state.showRevenue) {\n      lines.push(\n        <Line\n          name=\"Revenue\"\n          type=\"monotone\"\n          dataKey=\"revenue\"\n          stroke=\"#900C3F\"\n          activeDot={{ r: 8 }}\n        />\n      );\n    }\n    return lines;\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"100%\" }}>\n        <ResponsiveContainer\n          className=\"chartContainer\"\n          width=\"80%\"\n          height={500}\n        >\n          <LineChart\n            className=\"statsChart\"\n            width={500}\n            height={300}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5,\n            }}\n            data={this.state.stats}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {this.createLines()}\n          </LineChart>\n        </ResponsiveContainer>\n        <div style={{ display: \"flex\", flexDirection: \"row\", margin: 2 }}>\n          <Button\n            style={{\n              color: \"#FF5733\",\n              backgroundColor: \"white\",\n              border: \"2px solid #FF5733\",\n              margin: \"1px\",\n            }}\n            onClick={() => {\n              this.clicksToggle();\n            }}\n          >\n            Clicks\n          </Button>\n          <Button\n            style={{\n              color: \"#FFC300\",\n              backgroundColor: \"white\",\n              border: \"2px solid #FFC300\",\n              margin: \"1px\",\n            }}\n            onClick={() => {\n              this.impressionsToggle();\n            }}\n          >\n            Impressions\n          </Button>\n          <Button\n            style={{\n              color: \"#900C3F\",\n              backgroundColor: \"white\",\n              border: \"2px solid #900C3F\",\n              margin: \"1px\",\n            }}\n            onClick={() => {\n              this.revenueToggle();\n            }}\n          >\n            Revenue\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StatsChart;\n","import React, { Component } from \"react\";\nimport { MDBDataTable } from \"mdbreact\";\nimport moment from \"moment\";\n\nconst columns = [\n  {\n    label: \"POI Name\",\n    field: \"name\",\n    sort: \"asc\",\n    width: 150,\n  },\n  {\n    label: \"POI ID\",\n    field: \"poi_id\",\n    sort: \"asc\",\n    width: 150,\n  },\n  {\n    label: \"Date\",\n    field: \"date\",\n    sort: \"asc\",\n    width: 150,\n  },\n  {\n    label: \"Clicks\",\n    field: \"clicks\",\n    width: 150,\n  },\n  {\n    label: \"Impressions\",\n    field: \"impressions\",\n    width: 150,\n  },\n  {\n    label: \"Revenue\",\n    field: \"revenue\",\n    width: 150,\n  },\n  {\n    label: \"Events\",\n    field: \"events\",\n    width: 150,\n  },\n];\n\nclass CDTable extends Component {\n  state = { data: {} };\n\n  componentDidMount() {\n    fetch(\"/combined_data\")\n      .then((response) => response.json())\n      .then((data) => this.formatDates(data))\n      .then((data) => this.makeData(data));\n  }\n\n  makeData(data) {\n    let temp = { columns: columns, rows: data };\n    this.setState({ data: temp });\n  }\n\n  formatDates(rawData) {\n    for (let i in rawData) {\n      rawData[i].date = moment(rawData[i].date).format(\"dd, DD MMM Y\");\n    }\n    return rawData;\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          width: \"80%\",\n          margin: 10,\n        }}\n      >\n        <MDBDataTable striped bordered small data={this.state.data} />\n      </div>\n    );\n  }\n}\n\nexport default CDTable;\n","import React, { Component } from \"react\";\nimport { MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"../App.css\";\nimport moment from \"moment\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport { Button } from \"reactstrap\";\n\nconst createClusterIcon = function (cluster) {\n  return L.divIcon({\n    html: `<span>${cluster.getChildCount()}</span>`,\n    className: \"marker-cluster-custom\",\n    iconSize: L.point(40, 40, true),\n  });\n};\n\nclass GeoMap extends Component {\n  state = {\n    data: {},\n    currDay: null,\n    showClicks: true,\n    showImpressions: false,\n    showRevenue: false,\n  };\n\n  componentDidMount() {\n    fetch(\"/combined_data/geo\")\n      .then((response) => response.json())\n      .then((data) => this.formatDates(data))\n      .then((data) => this.setState({ data: data, currDay: data[0].date }));\n  }\n\n  formatDates(rawData) {\n    for (let i in rawData) {\n      rawData[i].date = moment(rawData[i].date).format(\"dd, DD MMM Y\");\n    }\n    return rawData;\n  }\n\n  createMarkers() {\n    let markers = [];\n    let data = this.state.data;\n    for (let i in data) {\n      if (data[i].date === this.state.currDay) {\n        if (this.state.showClicks) {\n          //Create icon with size based on value\n          let icon = L.divIcon({\n            className: \"marker-clicks-custom\",\n            iconSize: L.point(40, 40, false),\n          });\n          markers.push(\n            <Marker\n              key={data[i].poi_id}\n              position={[data[i].lat, data[i].lon]}\n              icon={icon}\n              onClick={() => {}}\n            >\n              <Popup>\n                POI: {data[i].name}\n                <br />\n                Clicks: {data[i].clicks}\n              </Popup>\n            </Marker>\n          );\n        }\n\n        if (this.state.showImpressions) {\n          //Create icon with size based on value\n          let icon = L.divIcon({\n            className: \"marker-impressions-custom\",\n            iconSize: L.point(40, 40, false),\n          });\n          markers.push(\n            <Marker\n              key={data[i].poi_id}\n              position={[data[i].lat, data[i].lon]}\n              icon={icon}\n              onClick={() => {}}\n            >\n              <Popup>\n                POI: {data[i].name}\n                <br />\n                Impressions: {data[i].impressions}\n              </Popup>\n            </Marker>\n          );\n        }\n        if (this.state.showRevenue) {\n          //Create icon with size based on value\n          let icon = L.divIcon({\n            className: \"marker-revenue-custom\",\n            iconSize: L.point(40, 40, false),\n          });\n          markers.push(\n            <Marker\n              key={data[i].poi_id}\n              position={[data[i].lat, data[i].lon]}\n              icon={icon}\n              onClick={() => {}}\n            >\n              <Popup>\n                POI: {data[i].name}\n                <br />\n                Revenue: {data[i].revenue}\n              </Popup>\n            </Marker>\n          );\n        }\n      }\n    }\n    return markers;\n  }\n\n  clicksToggle = () => {\n    let current = this.state.showClicks;\n    this.setState({\n      showClicks: true,\n      showImpressions: false,\n      showRevenue: false,\n    });\n  };\n\n  impressionsToggle = () => {\n    this.setState({\n      showClicks: false,\n      showImpressions: true,\n      showRevenue: false,\n    });\n  };\n\n  revenueToggle = () => {\n    this.setState({\n      showClicks: false,\n      showImpressions: false,\n      showRevenue: true,\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ width: \"80%\", margin: 10 }}>\n        {console.log(\"hello\", typeof this.state.data)}\n        <MapContainer\n          className=\"markercluster-map\"\n          center={[50.6, -105.3]}\n          zoom={5}\n        >\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          <MarkerClusterGroup\n            spiderfyDistanceMultiplier={1}\n            showCoverageOnHover={true}\n            iconCreateFunction={createClusterIcon}\n          >\n            {this.createMarkers()}\n          </MarkerClusterGroup>\n        </MapContainer>\n        <div style={{ display: \"flex\", flexDirection: \"row\", margin: 2 }}>\n          <Button\n            style={{\n              color: \"#FF5733\",\n              backgroundColor: \"white\",\n              border: \"2px solid #FF5733\",\n              margin: \"1px\",\n            }}\n            onClick={() => {\n              this.clicksToggle();\n            }}\n          >\n            Clicks\n          </Button>\n          <Button\n            style={{\n              color: \"#FFC300\",\n              backgroundColor: \"white\",\n              border: \"2px solid #FFC300\",\n              margin: \"1px\",\n            }}\n            onClick={() => {\n              this.impressionsToggle();\n            }}\n          >\n            Impressions\n          </Button>\n          <Button\n            style={{\n              color: \"#900C3F\",\n              backgroundColor: \"white\",\n              border: \"2px solid #900C3F\",\n              margin: \"1px\",\n            }}\n            onClick={() => {\n              this.revenueToggle();\n            }}\n          >\n            Revenue\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GeoMap;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport EventChart from \"./Components/eventChart\";\nimport StatsChart from \"./Components/statsChart\";\nimport CDTable from \"./Components/cdTable\";\nimport GeoMap from \"./Components/map\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <p className=\"title\" style={{ color: \"#FFFFFF\", fontSize: 24 }}>\n          EQWorks Frontend Stream Submission: Zack Hassan\n        </p>\n      </nav>\n      <EventChart />\n      <StatsChart />\n      <CDTable />\n      <GeoMap />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}